// Code generated by Wire protocol buffer compiler, do not edit.
// Source: google.api.CustomHttpPattern in http.proto
package com.google.api

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import okio.ByteString

/**
 * A custom pattern is used for defining custom HTTP verb.
 */
public class CustomHttpPattern(
  /**
   * The name of this custom HTTP verb.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  @JvmField
  public val kind: String = "",
  /**
   * The path matched by this custom verb.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  @JvmField
  public val path: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<CustomHttpPattern, CustomHttpPattern.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.kind = kind
    builder.path = path
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CustomHttpPattern) return false
    if (unknownFields != other.unknownFields) return false
    if (kind != other.kind) return false
    if (path != other.path) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + kind.hashCode()
      result = result * 37 + path.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """kind=${sanitize(kind)}"""
    result += """path=${sanitize(path)}"""
    return result.joinToString(prefix = "CustomHttpPattern{", separator = ", ", postfix = "}")
  }

  public fun copy(
    kind: String = this.kind,
    path: String = this.path,
    unknownFields: ByteString = this.unknownFields,
  ): CustomHttpPattern = CustomHttpPattern(kind, path, unknownFields)

  public class Builder : Message.Builder<CustomHttpPattern, Builder>() {
    @JvmField
    public var kind: String = ""

    @JvmField
    public var path: String = ""

    /**
     * The name of this custom HTTP verb.
     */
    public fun kind(kind: String): Builder {
      this.kind = kind
      return this
    }

    /**
     * The path matched by this custom verb.
     */
    public fun path(path: String): Builder {
      this.path = path
      return this
    }

    override fun build(): CustomHttpPattern = CustomHttpPattern(
      kind = kind,
      path = path,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CustomHttpPattern> = object : ProtoAdapter<CustomHttpPattern>(
      FieldEncoding.LENGTH_DELIMITED, 
      CustomHttpPattern::class, 
      "type.googleapis.com/google.api.CustomHttpPattern", 
      PROTO_3, 
      null, 
      "http.proto"
    ) {
      override fun encodedSize(`value`: CustomHttpPattern): Int {
        var size = value.unknownFields.size
        if (value.kind != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.kind)
        if (value.path != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.path)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: CustomHttpPattern) {
        if (value.kind != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.kind)
        if (value.path != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.path)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: CustomHttpPattern) {
        writer.writeBytes(value.unknownFields)
        if (value.path != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.path)
        if (value.kind != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.kind)
      }

      override fun decode(reader: ProtoReader): CustomHttpPattern {
        var kind: String = ""
        var path: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> kind = ProtoAdapter.STRING.decode(reader)
            2 -> path = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CustomHttpPattern(
          kind = kind,
          path = path,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: CustomHttpPattern): CustomHttpPattern = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<CustomHttpPattern> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
