// Code generated by Wire protocol buffer compiler, do not edit.
// Source: google.api.Http in http.proto
package com.google.api

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.checkElementsNotNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import okio.ByteString

/**
 * Defines the HTTP configuration for an API service. It contains a list of
 * \[HttpRule\]\[google.api.HttpRule\], each specifying the mapping of an RPC method
 * to one or more HTTP REST API methods.
 */
public class Http(
  rules: List<HttpRule> = emptyList(),
  /**
   * When set to true, URL path parameters will be fully URI-decoded except in
   * cases of single segment matches in reserved expansion, where "%2F" will be
   * left encoded.
   *
   * The default behavior is to not decode RFC 6570 reserved characters in multi
   * segment matches.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "fullyDecodeReservedExpansion",
    schemaIndex = 1,
  )
  @JvmField
  public val fully_decode_reserved_expansion: Boolean = false,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<Http, Http.Builder>(ADAPTER, unknownFields) {
  /**
   * A list of HTTP configuration rules that apply to individual API methods.
   *
   * **NOTE:** All service configuration rules follow "last one wins" order.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.google.api.HttpRule#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  @JvmField
  public val rules: List<HttpRule> = immutableCopyOf("rules", rules)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.rules = rules
    builder.fully_decode_reserved_expansion = fully_decode_reserved_expansion
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Http) return false
    if (unknownFields != other.unknownFields) return false
    if (rules != other.rules) return false
    if (fully_decode_reserved_expansion != other.fully_decode_reserved_expansion) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + rules.hashCode()
      result = result * 37 + fully_decode_reserved_expansion.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (rules.isNotEmpty()) result += """rules=$rules"""
    result += """fully_decode_reserved_expansion=$fully_decode_reserved_expansion"""
    return result.joinToString(prefix = "Http{", separator = ", ", postfix = "}")
  }

  public fun copy(
    rules: List<HttpRule> = this.rules,
    fully_decode_reserved_expansion: Boolean = this.fully_decode_reserved_expansion,
    unknownFields: ByteString = this.unknownFields,
  ): Http = Http(rules, fully_decode_reserved_expansion, unknownFields)

  public class Builder : Message.Builder<Http, Builder>() {
    @JvmField
    public var rules: List<HttpRule> = emptyList()

    @JvmField
    public var fully_decode_reserved_expansion: Boolean = false

    /**
     * A list of HTTP configuration rules that apply to individual API methods.
     *
     * **NOTE:** All service configuration rules follow "last one wins" order.
     */
    public fun rules(rules: List<HttpRule>): Builder {
      checkElementsNotNull(rules)
      this.rules = rules
      return this
    }

    /**
     * When set to true, URL path parameters will be fully URI-decoded except in
     * cases of single segment matches in reserved expansion, where "%2F" will be
     * left encoded.
     *
     * The default behavior is to not decode RFC 6570 reserved characters in multi
     * segment matches.
     */
    public fun fully_decode_reserved_expansion(fully_decode_reserved_expansion: Boolean): Builder {
      this.fully_decode_reserved_expansion = fully_decode_reserved_expansion
      return this
    }

    override fun build(): Http = Http(
      rules = rules,
      fully_decode_reserved_expansion = fully_decode_reserved_expansion,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Http> = object : ProtoAdapter<Http>(
      FieldEncoding.LENGTH_DELIMITED, 
      Http::class, 
      "type.googleapis.com/google.api.Http", 
      PROTO_3, 
      null, 
      "http.proto"
    ) {
      override fun encodedSize(`value`: Http): Int {
        var size = value.unknownFields.size
        size += HttpRule.ADAPTER.asRepeated().encodedSizeWithTag(1, value.rules)
        if (value.fully_decode_reserved_expansion != false) size +=
            ProtoAdapter.BOOL.encodedSizeWithTag(2, value.fully_decode_reserved_expansion)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Http) {
        HttpRule.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.rules)
        if (value.fully_decode_reserved_expansion != false) ProtoAdapter.BOOL.encodeWithTag(writer,
            2, value.fully_decode_reserved_expansion)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Http) {
        writer.writeBytes(value.unknownFields)
        if (value.fully_decode_reserved_expansion != false) ProtoAdapter.BOOL.encodeWithTag(writer,
            2, value.fully_decode_reserved_expansion)
        HttpRule.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.rules)
      }

      override fun decode(reader: ProtoReader): Http {
        val rules = mutableListOf<HttpRule>()
        var fully_decode_reserved_expansion: Boolean = false
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> rules.add(HttpRule.ADAPTER.decode(reader))
            2 -> fully_decode_reserved_expansion = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Http(
          rules = rules,
          fully_decode_reserved_expansion = fully_decode_reserved_expansion,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Http): Http = value.copy(
        rules = value.rules.redactElements(HttpRule.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<Http> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
